---
import { Player } from "../components/Player/Player.jsx";
import AsideMenu from "../components/AsideMenu/AsideMenu.astro";
import Header from "../components/Header.astro";
import MainBackground from "../components/MainBackground.astro";
import "simplebar/dist/simplebar.css";
import "../styles/global.css";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' href='/spotify-logo.webp' type='image/webp' />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div id='app' class='relative min-h-screen h-screen max-h-screen w-full flex flex-col bg-black text-white overflow-hidden 
      px-2 pt-2 pb-0 lg:pt-2 lg:pl-2 lg:pr-2 lg:pb-2'>
      <div class="w-full flex flex-row gap-2 overflow-hidden h-full">
        <aside class='max-w-[350px] flex flex-col flex-grow-1'>
          <AsideMenu />
        </aside>
  
        <main
          class='rounded-lg flex-1 bg-[#121212] w-full h-full relative'
          onkeydown='onKeyDown(event)'
        >
          <Header />
          <div id='swup' class='transition-main h-full' data-simplebar>
            <MainBackground />
            <slot />
          </div>
        </main>
      </div>

      <footer class='w-full px-2 py-1.5 z-[100] bg-black h-[72px]'>
        <Player client:load />
      </footer>
    </div>

    <style is:global>
      @media (max-width: 1024px) {
        aside {
          position: absolute;
          top: 0;
          left: 0;
          width: 350px;
          height: 100%;
          z-index: 100;
        }
      }
    </style>
  </body>

  <script is:inline>
    // con esta funcion al presionar la tecla espacio se evita el scroll de la pagina
    // y se puede usar para pausar la cancion en el reproductor
    function onKeyDown(event) {
      (event.key === " " || event.code === "Space") && event.preventDefault();
    }
  </script>

  <script>
    import SimpleBar from "simplebar";
    import Swup from "swup";

    const swup = new Swup({
      containers: ["#swup"],
      animateHistoryBrowsing: true,
    });

    swup.hooks.on("content:replace", () => {
      const header = document.querySelector(".header-container");
      header?.classList.remove("header-scrolled");
      paintColorHeaderBySongCards();
      updgradeBackgroundColor();
      handleSimplebar();
      restartColorBackground();
      activePlaylistCard();
    });

    swup.hooks.on("link:click", () => {
      const header = document.querySelector(".header-container");
      header?.classList.remove("header-scrolled");
    });

    swup.hooks.on("enable", () => {
      updgradeBackgroundColor();
      paintColorHeaderBySongCards();
      handleSimplebar();
      restartColorBackground();
      activePlaylistCard();
    });

    function paintColorHeaderBySongCards() {
      document.documentElement.style.setProperty(
        "--header-background-color",
        "#121212"
      );
      const songCards = document.querySelectorAll(".songs-cards > div");

      songCards.forEach((card: any) => {
        card.addEventListener("mouseover", () => {
          onMouseOverColorad(card);
        });
        card.addEventListener("mouseout", onMouseOutColorad);
        card.addEventListener("focus", () => onMouseFocusColorad(card));
        card.addEventListener("blur", onMouseOutColorad);
      });
    }

    function activePlaylistCard() {
      const navLinks = document.querySelectorAll(".playlist-card");
      const currentId = window.location.pathname.split("/").pop(); // Obtiene el ID actual desde la URL

      navLinks.forEach((link) => {
        const id = link.getAttribute("data-id");

        // Eliminamos las clases existentes
        link.classList.remove("playlist-active", "hover:bg-gray-500/20");

        if (id === currentId) {
          link.classList.add("playlist-active");
        } else {
          link.classList.add("hover:bg-gray-500/20");
        }
      });
    }

    function updgradeBackgroundColor() {
      // Obtener el valor de --custom-bg-color de la clase custom-bg
      const customBgElement = document.querySelector(".custom-bg");

      if (!customBgElement) return;

      const customBgColor =
        getComputedStyle(customBgElement).getPropertyValue("--custom-bg-color");

      // Establecer el valor obtenido en --header-background-color
      document.documentElement.style.setProperty(
        "--header-background-color",
        customBgColor
      );
    }

    function handleSimplebar() {
      const mainContent = document.querySelector("#swup");
      const scrollElement = mainContent?.querySelector(
        ".simplebar-content-wrapper"
      );

      if (scrollElement) {
        scrollElement.addEventListener("scroll", () => {
          const header = document.querySelector(".header-container");
          //console.log(scrollElement.scrollTop);
          if (scrollElement.scrollTop > 265) {
            header?.classList.add("header-scrolled");
          } else {
            header?.classList.remove("header-scrolled");
          }
        });
      }
    }

    function restartColorBackground() {
      const mainBackground = document.getElementById("main-background");
      const defaultColor = "#535353";

      if (mainBackground) {
        mainBackground.style.setProperty("--context-color", defaultColor);
        mainBackground.setAttribute("data-color", defaultColor);
        mainBackground.style.backgroundColor = defaultColor;
      }
    }

    function onMouseOverColorad(el: HTMLElement) {
      if (el) {
        const dataColor = el.getAttribute("data-color");
        if (!dataColor) return;
        window.coloradTimeout = setTimeout(
          () => setContainerColor(dataColor),
          200
        );
      }
    }

    function onMouseFocusColorad(el: HTMLElement) {
      if (el) {
        const dataColor = el.getAttribute("data-color");
        if (!dataColor) return;
        setContainerColor(dataColor);
      }
    }

    function onMouseOutColorad() {
      if (window.coloradTimeout) {
        clearTimeout(window.coloradTimeout);
        window.coloradTimeout = null;
      }
    }

    function setContainerColor(dataColor: any) {
      const mainBackground = document.getElementById("main-background");
      //const headerContainer = document.querySelector(".header-scrolled");
      const currentColor = mainBackground?.getAttribute("data-color");

      if (dataColor && dataColor != currentColor) {
        mainBackground?.style.setProperty("--context-color", dataColor);
        mainBackground?.setAttribute("data-color", dataColor);
        if (mainBackground?.style) {
          mainBackground.style.backgroundColor = dataColor;
        }

        // Cambiar el background-color de la clase .header-scrolled usando una variable CSS
        document.documentElement.style.setProperty(
          "--header-background-color",
          dataColor
        );
      }
    }
  </script>
</html>
